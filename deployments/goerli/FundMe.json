{
  "address": "0x6692F0709D11D1D74fe82a351491ff1734a8A06f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MAX_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa5bb609f1e0f30dc43e2f0d5a191144d420f30615230b13f097b292a47e1daff",
  "receipt": {
    "to": null,
    "from": "0x855e25A8dDC49ffa81b0c9ef9566e36fBD655432",
    "contractAddress": "0x6692F0709D11D1D74fe82a351491ff1734a8A06f",
    "transactionIndex": 43,
    "gasUsed": "716629",
    "logsBloom": "0x
    "blockHash": "0x1c173587bc9e8acdece7fd09ed41c568920b59c6cb815c4fd54df42ab941f4a3",
    "transactionHash": "0xa5bb609f1e0f30dc43e2f0d5a191144d420f30615230b13f097b292a47e1daff",
    "logs": [],
    "blockNumber": 9253781,
    "cumulativeGasUsed": "8858157",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 1,
  "solcInputHash": "c9fe61d75f6a00b7c1926ad176290e64",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MAX_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    uint256 public constant MAX_USD = 1000 * 1e18; // we use the Wei format because our getConversionRate function returns amount in USD in Wei format. The constant keyword helps with gas efficiency\\n    address[] private funders; // created an array of people who calls the fund function\\n    mapping(address => uint256) public addressToAmountFunded; // mapped each address to the amount they've funded\\n    address private immutable i_owner; // owner of contract. The immutable keyword helps with gas efficiency\\n    error NotOwner(); // a custom error handler. It helps with gas efficiency.\\n    AggregatorV3Interface priceFeed;\\n\\n    constructor(address priceFeedAddress) {\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n        i_owner = msg.sender;\\n    }\\n\\n    // funding\\n    function fund() public payable {\\n        require(\\n            (msg.value.getConversionRate(priceFeed)) <= MAX_USD,\\n            \\\"ETH funding amount exceeded\\\"\\n        );\\n        funders.push(msg.sender); // push addresses to the funders array\\n        addressToAmountFunded[msg.sender] += msg.value; // map address to amount sent\\n    }\\n\\n    //withdraw\\n    function withdraw() public onlyOwner {\\n        // require(funders.length > 0, \\\"No funders to withdraw from\\\");\\n\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            addressToAmountFunded[funder] = 0;\\n        }\\n        funders = new address[](0); // we refresh the funders array after withdrawal\\n        // payable(msg.sender).transfer(address(this).balance);=> // this is withdrawal method using the transfer method\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance); => // this is withdrawal method using send method\\n        // require(sendSuccess, \\\"Send Failure\\\");\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\"); // this is withdrawal method using the call method\\n        // require(callSuccess, \\\"Call Failure\\\");\\n        if (!callSuccess && msg.sender != i_owner) {\\n            // rather than using the require keyword, we can use an error handler as it helps with gas efficiency.\\n            revert();\\n        }\\n    }\\n\\n    // to ensure only the contract creator can call the withdraw function we do:\\n    modifier onlyOwner() {\\n        require(msg.sender == i_owner, \\\"Not owner\\\");\\n        _;\\n    }\\n\\n    receive() external payable {\\n        // this would help handle a scenraio where an address sends money to our contract without calling the fund function\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        // this would help handle a scenraio where an address sends money to our contract without calling the fund function\\n        fund();\\n    }\\n}\\n\",\"keccak256\":\"0x943306f9c352463626a21bbe856f450e5240076b142c61d03b0e98a026062f79\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\"; // imported the Chain link aggreagtor\\n\\nlibrary PriceConverter {\\n    // We firstly want to get the current price of ETH\\n    function getPrice(\\n        AggregatorV3Interface priceFeed // with this we dont have to hardcode the price feed address like we did before\\n    ) internal view returns (uint256) {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        return uint256(price * 1e10);\\n    }\\n\\n    // We want to get the price in USD for an amount of ETH\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 amountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return amountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x72dc5cb74ab583d4cd4de875275352ece126f93e84a74709115c7bf710cc358d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610cf0380380610cf083398181016040528101906100329190610110565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505061013d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100dd826100b2565b9050919050565b6100ed816100d2565b81146100f857600080fd5b50565b60008151905061010a816100e4565b92915050565b600060208284031215610126576101256100ad565b5b6000610134848285016100fb565b91505092915050565b608051610b9161015f6000396000818161022201526104310152610b916000f3fe6080604052600436106100435760003560e01c80633ccfd60b1461005c5780633e47d6f314610073578063b0a25a54146100b0578063b60d4288146100db57610052565b36610052576100506100e5565b005b61005a6100e5565b005b34801561006857600080fd5b50610071610220565b005b34801561007f57600080fd5b5061009a60048036038101906100959190610689565b61048d565b6040516100a791906106cf565b60405180910390f35b3480156100bc57600080fd5b506100c56104a5565b6040516100d291906106cf565b60405180910390f35b6100e36100e5565b005b683635c9adc5dea00000610124600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346104b290919063ffffffff16565b1115610165576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015c90610747565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102179190610796565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a590610816565b60405180910390fd5b60005b6000805490508110156103595760008082815481106102d3576102d2610836565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061035190610865565b9150506102b1565b50600067ffffffffffffffff811115610375576103746108ad565b5b6040519080825280602002602001820160405280156103a35781602001602082028036833780820191505090505b50600090805190602001906103b992919061057f565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103e09061090d565b60006040518083038185875af1925050503d806000811461041d576040519150601f19603f3d011682016040523d82523d6000602084013e610422565b606091505b505090508015801561048057507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b1561048a57600080fd5b50565b60016020528060005260406000206000915090505481565b683635c9adc5dea0000081565b6000806104be836104ee565b90506000670de0b6b3a764000085836104d79190610922565b6104e19190610993565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561053c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105609190610a68565b5050509150506402540be400816105779190610ae3565b915050919050565b8280548282559060005260206000209081019282156105f8579160200282015b828111156105f75782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061059f565b5b5090506106059190610609565b5090565b5b8082111561062257600081600090555060010161060a565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106568261062b565b9050919050565b6106668161064b565b811461067157600080fd5b50565b6000813590506106838161065d565b92915050565b60006020828403121561069f5761069e610626565b5b60006106ad84828501610674565b91505092915050565b6000819050919050565b6106c9816106b6565b82525050565b60006020820190506106e460008301846106c0565b92915050565b600082825260208201905092915050565b7f4554482066756e64696e6720616d6f756e742065786365656465640000000000600082015250565b6000610731601b836106ea565b915061073c826106fb565b602082019050919050565b6000602082019050818103600083015261076081610724565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006107a1826106b6565b91506107ac836106b6565b92508282019050808211156107c4576107c3610767565b5b92915050565b7f4e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b60006108006009836106ea565b915061080b826107ca565b602082019050919050565b6000602082019050818103600083015261082f816107f3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610870826106b6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036108a2576108a1610767565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b60006108f76000836108dc565b9150610902826108e7565b600082019050919050565b6000610918826108ea565b9150819050919050565b600061092d826106b6565b9150610938836106b6565b9250828202610946816106b6565b9150828204841483151761095d5761095c610767565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061099e826106b6565b91506109a9836106b6565b9250826109b9576109b8610964565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b6109e3816109c4565b81146109ee57600080fd5b50565b600081519050610a00816109da565b92915050565b6000819050919050565b610a1981610a06565b8114610a2457600080fd5b50565b600081519050610a3681610a10565b92915050565b610a45816106b6565b8114610a5057600080fd5b50565b600081519050610a6281610a3c565b92915050565b600080600080600060a08688031215610a8457610a83610626565b5b6000610a92888289016109f1565b9550506020610aa388828901610a27565b9450506040610ab488828901610a53565b9350506060610ac588828901610a53565b9250506080610ad6888289016109f1565b9150509295509295909350565b6000610aee82610a06565b9150610af983610a06565b9250828202610b0781610a06565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610b3f57610b3e610767565b5b8282058414831517610b5457610b53610767565b5b509291505056fea26469706673582212209d22cbf620baa1b02ef5c9268bbc2d160f7e29eb64187ef4b1365bc8c0943f4864736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100435760003560e01c80633ccfd60b1461005c5780633e47d6f314610073578063b0a25a54146100b0578063b60d4288146100db57610052565b36610052576100506100e5565b005b61005a6100e5565b005b34801561006857600080fd5b50610071610220565b005b34801561007f57600080fd5b5061009a60048036038101906100959190610689565b61048d565b6040516100a791906106cf565b60405180910390f35b3480156100bc57600080fd5b506100c56104a5565b6040516100d291906106cf565b60405180910390f35b6100e36100e5565b005b683635c9adc5dea00000610124600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346104b290919063ffffffff16565b1115610165576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015c90610747565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102179190610796565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a590610816565b60405180910390fd5b60005b6000805490508110156103595760008082815481106102d3576102d2610836565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061035190610865565b9150506102b1565b50600067ffffffffffffffff811115610375576103746108ad565b5b6040519080825280602002602001820160405280156103a35781602001602082028036833780820191505090505b50600090805190602001906103b992919061057f565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103e09061090d565b60006040518083038185875af1925050503d806000811461041d576040519150601f19603f3d011682016040523d82523d6000602084013e610422565b606091505b505090508015801561048057507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b1561048a57600080fd5b50565b60016020528060005260406000206000915090505481565b683635c9adc5dea0000081565b6000806104be836104ee565b90506000670de0b6b3a764000085836104d79190610922565b6104e19190610993565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561053c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105609190610a68565b5050509150506402540be400816105779190610ae3565b915050919050565b8280548282559060005260206000209081019282156105f8579160200282015b828111156105f75782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061059f565b5b5090506106059190610609565b5090565b5b8082111561062257600081600090555060010161060a565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106568261062b565b9050919050565b6106668161064b565b811461067157600080fd5b50565b6000813590506106838161065d565b92915050565b60006020828403121561069f5761069e610626565b5b60006106ad84828501610674565b91505092915050565b6000819050919050565b6106c9816106b6565b82525050565b60006020820190506106e460008301846106c0565b92915050565b600082825260208201905092915050565b7f4554482066756e64696e6720616d6f756e742065786365656465640000000000600082015250565b6000610731601b836106ea565b915061073c826106fb565b602082019050919050565b6000602082019050818103600083015261076081610724565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006107a1826106b6565b91506107ac836106b6565b92508282019050808211156107c4576107c3610767565b5b92915050565b7f4e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b60006108006009836106ea565b915061080b826107ca565b602082019050919050565b6000602082019050818103600083015261082f816107f3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610870826106b6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036108a2576108a1610767565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b60006108f76000836108dc565b9150610902826108e7565b600082019050919050565b6000610918826108ea565b9150819050919050565b600061092d826106b6565b9150610938836106b6565b9250828202610946816106b6565b9150828204841483151761095d5761095c610767565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061099e826106b6565b91506109a9836106b6565b9250826109b9576109b8610964565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b6109e3816109c4565b81146109ee57600080fd5b50565b600081519050610a00816109da565b92915050565b6000819050919050565b610a1981610a06565b8114610a2457600080fd5b50565b600081519050610a3681610a10565b92915050565b610a45816106b6565b8114610a5057600080fd5b50565b600081519050610a6281610a3c565b92915050565b600080600080600060a08688031215610a8457610a83610626565b5b6000610a92888289016109f1565b9550506020610aa388828901610a27565b9450506040610ab488828901610a53565b9350506060610ac588828901610a53565b9250506080610ad6888289016109f1565b9150509295509295909350565b6000610aee82610a06565b9150610af983610a06565b9250828202610b0781610a06565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610b3f57610b3e610767565b5b8282058414831517610b5457610b53610767565b5b509291505056fea26469706673582212209d22cbf620baa1b02ef5c9268bbc2d160f7e29eb64187ef4b1365bc8c0943f4864736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 60,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 64,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}