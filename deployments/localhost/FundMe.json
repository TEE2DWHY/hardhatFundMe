{
  "address": "0x71C95911E9a5D330f4D621842EC243EE1343292e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MAX_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb2961f2062da6f6584380273134b13bf54d1c1fc2ebe7a9005fea1fea5b3193d",
  "receipt": {
    "to": null,
    "from": "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
    "contractAddress": "0x71C95911E9a5D330f4D621842EC243EE1343292e",
    "transactionIndex": 0,
    "gasUsed": "788266",
    "logsBloom": "0x
    "blockHash": "0x58331a2bce2c95103601d5c784bfc11783c63de38ef3855b5170cf3273c50879",
    "transactionHash": "0xb2961f2062da6f6584380273134b13bf54d1c1fc2ebe7a9005fea1fea5b3193d",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "788266",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8464135c8F25Da09e49BC8782676a84730C318bC"
  ],
  "numDeployments": 1,
  "solcInputHash": "f4675f707010e7660c5f130e3c3dd2b3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MAX_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    uint256 public constant MAX_USD = 1000 * 1e18; // we use the Wei format because our getConversionRate function returns amount in USD in Wei format. The constant keyword helps with gas efficiency\\n    address[] public funders; // created an array of people who calls the fund function\\n    mapping(address => uint256) public addressToAmountFunded; // mapped each address to the amount they've funded\\n    address public immutable i_owner; // owner of contract. The immutable keyword helps with gas efficiency\\n    error NotOwner(); // a custom error handler. It helps with gas efficiency.\\n    AggregatorV3Interface priceFeed;\\n\\n    constructor(address priceFeedAddress) {\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n        i_owner = msg.sender;\\n    }\\n\\n    // funding\\n    function fund() public payable {\\n        require(\\n            (msg.value.getConversionRate(priceFeed)) <= MAX_USD,\\n            \\\"ETH funding amount exceeded\\\"\\n        );\\n        funders.push(msg.sender); // push addresses to the funders array\\n        addressToAmountFunded[msg.sender] += msg.value; // map address to amount sent\\n    }\\n\\n    //withdraw\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex]; // we get the funder address from the first index\\n            addressToAmountFunded[funder] = 0; // we reset the amount funded by funder to 0\\n        }\\n        funders = new address[](0); // we refresh the funders array after withdrawal\\n        // payable(msg.sender).transfer(address(this).balance);=> // this is withdrawal method using the transfer method\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance); => // this is withdrawal method using send method\\n        // require(sendSuccess, \\\"Send Failure\\\");\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\"); // this is withdrawal method using the call method\\n        // require(callSuccess, \\\"Call Failure\\\");\\n        if (!callSuccess && msg.sender != i_owner) {\\n            // rather than using the require keyword, we can use an error handler as it helps with gas efficiency.\\n            revert();\\n        }\\n    }\\n\\n    // to ensure only the contract creator can call the withdraw function we do:\\n    modifier onlyOwner() {\\n        require(msg.sender == i_owner, \\\"Not owner\\\");\\n        _;\\n    }\\n\\n    receive() external payable {\\n        // this would help handle a scenraio where an address sends money to our contract without calling the fund function\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        // this would help handle a scenraio where an address sends money to our contract without calling the fund function\\n        fund();\\n    }\\n}\\n\",\"keccak256\":\"0x4f7a741249222f10c4b1c169ff91bb8a2208e841e5fb45601aee0d50450b7e22\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\"; // imported the Chain link aggreagtor\\n\\nlibrary PriceConverter {\\n    // We firstly want to get the current price of ETH\\n    function getPrice(\\n        AggregatorV3Interface priceFeed // with this we dont have to hardcode the price feed address like we did before\\n    ) internal view returns (uint256) {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        return uint256(price * 1e10);\\n    }\\n\\n    // We want to get the price in USD for an amount of ETH\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 amountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return amountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x72dc5cb74ab583d4cd4de875275352ece126f93e84a74709115c7bf710cc358d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610e44380380610e4483398181016040528101906100329190610110565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505061013d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100dd826100b2565b9050919050565b6100ed816100d2565b81146100f857600080fd5b50565b60008151905061010a816100e4565b92915050565b600060208284031215610126576101256100ad565b5b6000610134848285016100fb565b91505092915050565b608051610cde610166600039600081816102a0015281816104af01526105320152610cde6000f3fe6080604052600436106100595760003560e01c80633ccfd60b146100725780633e47d6f314610089578063b0a25a54146100c6578063b60d4288146100f1578063dba6335f146100fb578063dc0d3dff1461012657610068565b3661006857610066610163565b005b610070610163565b005b34801561007e57600080fd5b5061008761029e565b005b34801561009557600080fd5b506100b060048036038101906100ab919061076a565b61050b565b6040516100bd91906107b0565b60405180910390f35b3480156100d257600080fd5b506100db610523565b6040516100e891906107b0565b60405180910390f35b6100f9610163565b005b34801561010757600080fd5b50610110610530565b60405161011d91906107da565b60405180910390f35b34801561013257600080fd5b5061014d60048036038101906101489190610821565b610554565b60405161015a91906107da565b60405180910390f35b683635c9adc5dea000006101a2600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461059390919063ffffffff16565b11156101e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101da906108ab565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461029591906108fa565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461032c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103239061097a565b60405180910390fd5b60005b6000805490508110156103d75760008082815481106103515761035061099a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103cf906109c9565b91505061032f565b50600067ffffffffffffffff8111156103f3576103f2610a11565b5b6040519080825280602002602001820160405280156104215781602001602082028036833780820191505090505b5060009080519060200190610437929190610660565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161045e90610a71565b60006040518083038185875af1925050503d806000811461049b576040519150601f19603f3d011682016040523d82523d6000602084013e6104a0565b606091505b50509050801580156104fe57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b1561050857600080fd5b50565b60016020528060005260406000206000915090505481565b683635c9adc5dea0000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061056457600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061059f836105cf565b90506000670de0b6b3a764000085836105b89190610a86565b6105c29190610af7565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561061d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106419190610bb5565b5050509150506402540be400816106589190610c30565b915050919050565b8280548282559060005260206000209081019282156106d9579160200282015b828111156106d85782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610680565b5b5090506106e691906106ea565b5090565b5b808211156107035760008160009055506001016106eb565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107378261070c565b9050919050565b6107478161072c565b811461075257600080fd5b50565b6000813590506107648161073e565b92915050565b6000602082840312156107805761077f610707565b5b600061078e84828501610755565b91505092915050565b6000819050919050565b6107aa81610797565b82525050565b60006020820190506107c560008301846107a1565b92915050565b6107d48161072c565b82525050565b60006020820190506107ef60008301846107cb565b92915050565b6107fe81610797565b811461080957600080fd5b50565b60008135905061081b816107f5565b92915050565b60006020828403121561083757610836610707565b5b60006108458482850161080c565b91505092915050565b600082825260208201905092915050565b7f4554482066756e64696e6720616d6f756e742065786365656465640000000000600082015250565b6000610895601b8361084e565b91506108a08261085f565b602082019050919050565b600060208201905081810360008301526108c481610888565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061090582610797565b915061091083610797565b9250828201905080821115610928576109276108cb565b5b92915050565b7f4e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b600061096460098361084e565b915061096f8261092e565b602082019050919050565b6000602082019050818103600083015261099381610957565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006109d482610797565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a0657610a056108cb565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a5b600083610a40565b9150610a6682610a4b565b600082019050919050565b6000610a7c82610a4e565b9150819050919050565b6000610a9182610797565b9150610a9c83610797565b9250828202610aaa81610797565b91508282048414831517610ac157610ac06108cb565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b0282610797565b9150610b0d83610797565b925082610b1d57610b1c610ac8565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610b4781610b28565b8114610b5257600080fd5b50565b600081519050610b6481610b3e565b92915050565b6000819050919050565b610b7d81610b6a565b8114610b8857600080fd5b50565b600081519050610b9a81610b74565b92915050565b600081519050610baf816107f5565b92915050565b600080600080600060a08688031215610bd157610bd0610707565b5b6000610bdf88828901610b55565b9550506020610bf088828901610b8b565b9450506040610c0188828901610ba0565b9350506060610c1288828901610ba0565b9250506080610c2388828901610b55565b9150509295509295909350565b6000610c3b82610b6a565b9150610c4683610b6a565b9250828202610c5481610b6a565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610c8c57610c8b6108cb565b5b8282058414831517610ca157610ca06108cb565b5b509291505056fea26469706673582212200366b16ab21d40aad071ce6d9dc9695d00a89a94dec3e1a01537087449a4bef164736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100595760003560e01c80633ccfd60b146100725780633e47d6f314610089578063b0a25a54146100c6578063b60d4288146100f1578063dba6335f146100fb578063dc0d3dff1461012657610068565b3661006857610066610163565b005b610070610163565b005b34801561007e57600080fd5b5061008761029e565b005b34801561009557600080fd5b506100b060048036038101906100ab919061076a565b61050b565b6040516100bd91906107b0565b60405180910390f35b3480156100d257600080fd5b506100db610523565b6040516100e891906107b0565b60405180910390f35b6100f9610163565b005b34801561010757600080fd5b50610110610530565b60405161011d91906107da565b60405180910390f35b34801561013257600080fd5b5061014d60048036038101906101489190610821565b610554565b60405161015a91906107da565b60405180910390f35b683635c9adc5dea000006101a2600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461059390919063ffffffff16565b11156101e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101da906108ab565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461029591906108fa565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461032c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103239061097a565b60405180910390fd5b60005b6000805490508110156103d75760008082815481106103515761035061099a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103cf906109c9565b91505061032f565b50600067ffffffffffffffff8111156103f3576103f2610a11565b5b6040519080825280602002602001820160405280156104215781602001602082028036833780820191505090505b5060009080519060200190610437929190610660565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161045e90610a71565b60006040518083038185875af1925050503d806000811461049b576040519150601f19603f3d011682016040523d82523d6000602084013e6104a0565b606091505b50509050801580156104fe57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b1561050857600080fd5b50565b60016020528060005260406000206000915090505481565b683635c9adc5dea0000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061056457600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061059f836105cf565b90506000670de0b6b3a764000085836105b89190610a86565b6105c29190610af7565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561061d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106419190610bb5565b5050509150506402540be400816106589190610c30565b915050919050565b8280548282559060005260206000209081019282156106d9579160200282015b828111156106d85782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610680565b5b5090506106e691906106ea565b5090565b5b808211156107035760008160009055506001016106eb565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107378261070c565b9050919050565b6107478161072c565b811461075257600080fd5b50565b6000813590506107648161073e565b92915050565b6000602082840312156107805761077f610707565b5b600061078e84828501610755565b91505092915050565b6000819050919050565b6107aa81610797565b82525050565b60006020820190506107c560008301846107a1565b92915050565b6107d48161072c565b82525050565b60006020820190506107ef60008301846107cb565b92915050565b6107fe81610797565b811461080957600080fd5b50565b60008135905061081b816107f5565b92915050565b60006020828403121561083757610836610707565b5b60006108458482850161080c565b91505092915050565b600082825260208201905092915050565b7f4554482066756e64696e6720616d6f756e742065786365656465640000000000600082015250565b6000610895601b8361084e565b91506108a08261085f565b602082019050919050565b600060208201905081810360008301526108c481610888565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061090582610797565b915061091083610797565b9250828201905080821115610928576109276108cb565b5b92915050565b7f4e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b600061096460098361084e565b915061096f8261092e565b602082019050919050565b6000602082019050818103600083015261099381610957565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006109d482610797565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a0657610a056108cb565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a5b600083610a40565b9150610a6682610a4b565b600082019050919050565b6000610a7c82610a4e565b9150819050919050565b6000610a9182610797565b9150610a9c83610797565b9250828202610aaa81610797565b91508282048414831517610ac157610ac06108cb565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b0282610797565b9150610b0d83610797565b925082610b1d57610b1c610ac8565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610b4781610b28565b8114610b5257600080fd5b50565b600081519050610b6481610b3e565b92915050565b6000819050919050565b610b7d81610b6a565b8114610b8857600080fd5b50565b600081519050610b9a81610b74565b92915050565b600081519050610baf816107f5565b92915050565b600080600080600060a08688031215610bd157610bd0610707565b5b6000610bdf88828901610b55565b9550506020610bf088828901610b8b565b9450506040610c0188828901610ba0565b9350506060610c1288828901610ba0565b9250506080610c2388828901610b55565b9150509295509295909350565b6000610c3b82610b6a565b9150610c4683610b6a565b9250828202610c5481610b6a565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610c8c57610c8b6108cb565b5b8282058414831517610ca157610ca06108cb565b5b509291505056fea26469706673582212200366b16ab21d40aad071ce6d9dc9695d00a89a94dec3e1a01537087449a4bef164736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 60,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 64,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}